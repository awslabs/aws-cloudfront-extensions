AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  authentication-with-cognito

  Authenticating by Cognito or third-party native library, add security information into HTTP headers, etc.
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    Tags:
      Publisher: GCR-Solutions

Metadata:
  AWS::ServerlessRepo::Application:
    Name: authentication-with-cognito
    Description: Sample SAM Template for authentication-with-cognito
    Author: AWS
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE.txt
    ReadmeUrl: README.md
    Labels: ['gcr-solutions','cloudfront+','sample', 'edge','lambda-edge']
    HomePageUrl: https://www.amazonaws.cn/en/solutions/
    SemanticVersion: 1.0.0
    SourceCodeUrl: https://github.com/cc4i/aws-cloudfront-extensions/edge/nodejs/authentication-with-cognito

Parameters:
  UserPoolId:
    Type: String
    Default: ""
    Description: "The cognito user pool id"
  CognitoRegion:
    Type: String
    Default: "us-east-1"
    Description: "The cognito region"    

Resources:
  AuthenticationByCognito:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: authentication-with-cognito/
      Handler: app.handler
      Runtime: nodejs12.x
      Role: !GetAtt EdgeFunctionRole.Arn

  EdgeFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Sub ${AWS::StackName}-edgeFunction
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
                - ssm.amazonaws.com
            Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
  UpdateConfigFunction: 
    Type: AWS::Lambda::Function
    Properties: 
      Handler: index.handler
      Role: !GetAtt EdgeFunctionRole.Arn
      Runtime: python3.7
      Timeout: 60
      MemorySize: 1536
      Code: 
        ZipFile: |
          import cfnresponse
          import boto3
          import json
          from io import BytesIO
          from urllib.request import urlopen
          from pathlib import Path
          def handler(event, context):
            print (str(event))
            responseData = {}
            try: 
              if (event['RequestType'] == 'Create') or (event['RequestType'] == 'Update'):
                  UserPoolId = event['ResourceProperties']['UserPoolId']
                  CognitoRegion = event['ResourceProperties']['CognitoRegion']    
                  print("get jwks value")
                  jwksUrl = 'https://cognito-idp.' + CognitoRegion + '.amazonaws.com/' + UserPoolId + '/.well-known/jwks.json'
                  with urlopen(jwksUrl) as httpresponse:
                      jwks = str( httpresponse.read() )
                  jwks = jwks.replace('b\'{', '{')
                  jwks = jwks.replace('}\'', '}')
                  putSSMParameter("UserPoolId", UserPoolId)
                  putSSMParameter("JWKS", jwks)
                  putSSMParameter("UserPoolId", UserPoolId)
                  putSSMParameter("CognitoRegion", CognitoRegion)
                  responseData['Status'] = 'SUCCESS'
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")
                  print ('SUCCESS')
              else:
                  print("SUCCESS - operation not Create or Update, ResponseData=" + str(responseData))
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")
            except Exception as e:
              responseData['Error'] = str(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData, "CustomResourcePhysicalID") 
              print("FAILED ERROR: " + responseData['Error'])
          def putSSMParameter(key, value):
            client = boto3.client('ssm')
            response = client.put_parameter(
                Name=key,
                Description=value,
                Value=value,
                Type='String',
                Tier='Standard',
                DataType='text'
            )

  UpdateConfigCustom:
    Type: Custom::UpdateConfigCustom
    DeletionPolicy: Retain
    Properties:
      ServiceToken: !GetAtt UpdateConfigFunction.Arn
      UserPoolId: !Ref UserPoolId
      CognitoRegion: !Ref CognitoRegion            

Outputs:
  ServingOnDeviceFunction:
    Description: "Simple Lambda Edge function ARN"
    Value: !GetAtt AuthenticationByCognito.Arn
  ServingOnDeviceFunctionIamRole:
    Description: "Implicit IAM Role created for Simple Lambda Edge function"
    Value: !GetAtt EdgeFunctionRole.Arn
