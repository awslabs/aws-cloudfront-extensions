Description: (SO8148) custom-host is a CloudFront Function which replaces host with the value in header awscustomhost.


Resources:
  CustomHostFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: custom-host
      AutoPublish: true
      FunctionConfig:
        Comment: custom-host
        Runtime: cloudfront-js-1.0
      FunctionCode: |
        'use strict';

        var querystring = require('querystring');
        var Response403 = {
            status: 403,
            statusDescription: 'Access Denied'
        };
        var json = '{"h(.*).market.xiaomi.com": "file.market.morig.mgslb.com", "bg(.*).market.xiaomi.com": "file.market.morig.mgslb.com", "fg(.*).market.xiaomi.com": "file.market.morig.mgslb.com"}'

        function handler (event)  {
            var request = event.request;
            var uri = request.uri;
            var params = request.querystring;
            console.log('request before:' + JSON.stringify(request));

            //1 匹配 ^/download/AppStore/(\w+)多个没有空格字符/([a-fA-F0-9]{32})$ 32位字符串
            if (uri.includes('/download/AppStore/')) {
                uri = removeSlash(uri);
                if (!!uri.match(/^\/download\/AppStore\/(\w+)\/([a-fA-F0-9]{32})$/)) {
                    var index = uri.lastIndexOf("\/");
                    uri = uri.substring(0, index);
                }
                request.uri = uri;
            }
            //2 匹配参数_track
            for (var prop in params) {
                if (!!prop.match(/^_track_(.*)$/)) {
                    request.querystring = {};
                    break;
                }
            }
            //自定义host
            if (request.headers['awsprewarmhost']) {
                request.headers['awscustomhost'] = {value: request.headers["awsprewarmhost"].value};
                delete request.headers["awsprewarmhost"]
            } else {
                var host = request.headers["host"].value;
                request.headers['awscustomhost'] = {value: host};
                var customizeHosts = JSON.parse(json);
                if (customizeHosts) {
                    for (var domain in customizeHosts) {
                        if (host.match(domain)) {
                            console.log(`update customize host: key ${domain}, value ${customizeHosts[domain]}`)
                            request.headers['awscustomhost'] = {value: customizeHosts[domain]};
                            break
                        }
                    }
                }
            }
            console.log('request after:' + JSON.stringify(request));
            return request;
        };

        function removeSlash(uri) {
            var temp = uri.charAt(uri.length - 1);
            while (temp == '/') {
                uri = uri.substring(0, uri.length - 1);
                var temp = uri.charAt(uri.length - 1);
            }
            return uri;
        }


Outputs:
  CustomHostFunctionARN:
    Description: "CloudFront Function ARN"
    Value: !GetAtt CustomHostFunction.FunctionMetadata.FunctionARN
  SolutionId:
    Description: "Solution id"
    Value: "SO8148"
