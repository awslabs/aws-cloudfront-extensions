<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CloudFront Extensions workshop on CloudFront Extensions</title><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/</link><description>Recent content in CloudFront Extensions workshop on CloudFront Extensions</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://awslabs.github.io/aws-cloudfront-extensions/workshop/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS CloudShell</title><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/prerequisite/aws-cloudshell/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/workshop/prerequisite/aws-cloudshell/readme/</guid><description>AWS CloudShell is a browser-based shell that makes it easy to securely manage, explore, and interact with your AWS resources. CloudShell is pre-authenticated with your console credentials. Common development and operations tools are pre-installed, so no local installation or configuration is required. With CloudShell, you can quickly run scripts with the AWS Command Line Interface (AWS CLI), experiment with AWS service APIs using the AWS SDKs, or use a range of other tools to be productive.</description></item><item><title>Contributing via pull requests</title><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/contribution/pr/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/workshop/contribution/pr/readme/</guid><description>Pull Request Checklist You are able to implement a new feature or fix an issue by pull requests, before sending pull requests, make sure you followed this list
Read contributing guidelines Read Code of Conduct Write unit test cases and make sure the unit test is passed It is mandatory to output solution id. Here is an example, you only need to replace the SolutionId Value with yours To send us a pull request by doing the following:</description></item><item><title>Create a CloudFront Distribution</title><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/develop/cloudfront-distribution/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/workshop/develop/cloudfront-distribution/readme/</guid><description>Before you create the example Lambda@Edge function, you need to have a CloudFront environment to work with that includes an origin to serve content from. If you already have an environment to use, you can skip this step.
To create a CloudFront distribution with an Amazon S3 origin, you will do the following steps
Create an S3 bucket Sign in to the AWS Management Console and open the Amazon S3 console at https://console.</description></item><item><title>Deploy a Lambda@Edge function to authenticate with Cognito</title><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/deploy/deploy-auth/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/workshop/deploy/deploy-auth/readme/</guid><description>In this step, you will find and deploy one serverless application that have been published to the AWS Serverless Application Repository. The application enables authentication with Amazon Cognito for your website.
The following diagram is a high-level architecture of this lab
There are two S3 bucket
Private S3 bucket: contains private content, users can not access the content before login by Cognito Public S3 bucket: contains the demo website resources, users can access it through CloudFront publicly Here is how it works</description></item><item><title>S3 bucket</title><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/cleanup/s3-bucket/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/workshop/cleanup/s3-bucket/readme/</guid><description>To clean S3 bucket
Go to the S3 console https://console.aws.amazon.com/s3
Enter cloudfront-extension-workshop in the search bar of Buckets. Then select the radio button to the right of the retrieved bucket. Then press the Empty button at the top. To activate the Empty button of the empty bucket, enter the bucket name and press the Empty button to delete all bucket
When the message that the deletion is complete appears, click Exit on the upper right to complete</description></item><item><title>AWS CDK</title><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/prerequisite/aws-cdk/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/workshop/prerequisite/aws-cdk/readme/</guid><description>The AWS Cloud Development Kit (AWS CDK) is an open source software development framework to define your cloud application resources using familiar programming languages.
AWS CDK is not pre-installed in AWS CloudShell currently, so you will need to install it
Install the AWS CDK Toolkit globally using the following Node Package Manager command.
sudo npm install -g aws-cdk Run the following command to verify correct installation and print the version number of the AWS CDK.</description></item><item><title>Cognito User Pool</title><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/cleanup/cognito-user-pool/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/workshop/cleanup/cognito-user-pool/readme/</guid><description>To delete a Cognito user pool
Go to the Amazon Cognito console. You may be prompted for your AWS credentials.
Manage User Pools.
Choose the user pool you want to delete.
On the Domain name page under App integration select Delete domain.
Choose Delete domain when prompted to confirm.
Go to the General Settings page.
Select Delete pool in the upper right corner of the page.</description></item><item><title>Deploy a Lambda@Edge function to serve based on devices</title><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/deploy/deploy-device/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/workshop/deploy/deploy-device/readme/</guid><description>In this step, you will find and deploy serverless applications that have been published to the AWS Serverless Application Repository, the application serves content based on device type, for example, mobile device will be forwarded to access content for mobile devices, desktop device will be forwarded to access specific content, and so on so forth
The following diagram is a high-level architecture of this lab
The S3 bucket contains a demo website content, it has 4 folders:</description></item><item><title>Deployment</title><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/security/guide/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/workshop/security/guide/readme/</guid><description>Source code CloudFormation template Estimated deployment time: 10 min
Deploy by CloudFormation The template launches in the US East (N. Virginia) Region by default. You can deploy the WAF&amp;amp;Shield Automcation Solution with existing AWS CloudFormation templates.
Under Parameters, review the parameters for the template, and modify them as necessary. To opt out of a particular feature, choose none or no as applicable. Specifies whether this is for an AWS CloudFront distribution or for a regional application.</description></item><item><title>Reporting issues</title><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/contribution/bug-report/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/workshop/contribution/bug-report/readme/</guid><description>Issues can be used to keep track of bugs, enhancements, or other requests. Before creating an issue, make sure you have read the contributing guidelines
To create an issue by doing the following
Under your repository, choose Issues tab and choose New issue Choose the issue type Bug (software defects) Feature request General issue (non-software defects such as document issue, process issue) Security vulnerability Fill in each field defined in the template and submit the issue</description></item><item><title>Upload CloudFront Extensions code into CloudShell</title><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/develop/download-code/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/workshop/develop/download-code/readme/</guid><description>To download CloudFront Extensions code and upload it onto CloudShell
Skip this step if you already have the codes in CloudShell
Go to CloudFront Extensions code
Choose Download ZIP Upload the zip package onto CloudShell Unzip the package into home folder
unzip aws-cloudfront-extensions-main.zip You can also clone the codes by SSH or Https.
For SSH, you will need to setup the ssh key in your github account by following this doc</description></item><item><title>CloudFront distribution</title><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/cleanup/cf-distribution/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/workshop/cleanup/cf-distribution/readme/</guid><description>To clean CloudFront distribution
Go to the CloudFront console: https://console.aws.amazon.com/cloudfront
Enter cloudfront-extension-workshop in the search bar of CloudFront distributions. Then choose Disable at the top Wait for the status to be Deployed, then choose Delete</description></item><item><title>Configure your credentials</title><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/prerequisite/aws-config/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/workshop/prerequisite/aws-config/readme/</guid><description>To configure your credentials, run below command
aws configure Type your credentials and type us-east-1 in terms of region name
AWS Access Key ID [None]: &amp;lt;type your access key id&amp;gt; AWS Secret Access Key [None]: &amp;lt;type your secret access key&amp;gt; Default region name [None]: us-east-1 Default output format [None]: If you forget the credentials, you need to create a new one in IAM console</description></item><item><title>Deploy OWASP Juice Shop</title><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/security-practice/juice-shop/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/workshop/security-practice/juice-shop/readme/</guid><description>In this section you will deploy the OWASP Juice Shop by CloudFormation stack, first please deploy the Juice Shop Web Application in US East (N. Virginia) (us-east-1) region.
This CloudFormation stack will take approximately 5 minutes to complete. Step by step instructions:
Provide your stack with a unique name. Note: Be careful not to exceed the 64-character stack name limit Click the “Next” button at the bottom of the remaining pages, using the default values.</description></item><item><title>Understand CloudFront Extensions code structure</title><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/develop/code-structure/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/workshop/develop/code-structure/readme/</guid><description>You will see the following structure after cd aws-cloudfront-extensions-main Here are the explanation for each folder
.github/workflows: the workflow after a PR is created and managed by github actions docs: documents which are used for introducing the project and workshop edge/nodejs: lambda@Edge codes written in nodejs edge/python: lambda@Edge codes written in python scripts: shell scripts used in workflows templates: cdk scripts for deployment such as AWS WAF rules website: resources for holding a workshop In this workshop, you will create a Lambda@Edge function in edge/nodejs folder</description></item><item><title>CloudFormation</title><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/cleanup/cloudformation/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/workshop/cleanup/cloudformation/readme/</guid><description>To clean Lambda function and IAM roles
Go to the CloudFormation console https://console.aws.amazon.com/CloudFormation Select Stacks from the left menu, select the radio button to sam-app, and select Delete at the top</description></item><item><title>Create a Lambda@Edge function</title><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/develop/edge-function/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/workshop/develop/edge-function/readme/</guid><description>In this step, you will create a Lambda function by AWS Serverless Application Model(SAM), the function adds code to update response headers in your CloudFront distribution.
Download a sample AWS SAM application After completing Upload CloudFront Extensions Code into CloudShell section, you have uploaded CloudFront Extensions into CloudShell, go to CloudFront Extensions folder and perform following commands:
cd edge/nodejs/ sam init Choose 1 - AWS Quick Start Templates</description></item><item><title>CloudShell</title><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/cleanup/cloudshell/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/workshop/cleanup/cloudshell/readme/</guid><description>To clean CloudShell
Go to the CloudShell console https://console.aws.amazon.com/cloudshell Choose Actions in the top right. Then choose Delete AWS CloudShell home directory</description></item><item><title>Deploy WAF &amp; Shield Automations</title><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/security-practice/deploy/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/workshop/security-practice/deploy/readme/</guid><description>Deploy WAF &amp;amp; Shield Automations Please follow this previous step to Upload CloudFront Extensions code into CloudShell if have not unzipped the CloudFront Extensions repository in the CloudShell.
After unzipping the aws-cloudfront-extensions archive, you can deploy the WAF &amp;amp; Shield Automations in the CloudShell by the next commands:
Create a symbolic link to PIP from PIP3
sudo ln -s /usr/bin/pip3 /usr/bin/pip Change the current directory to &amp;lsquo;aws-cloudfront-waf/deployment&amp;rsquo;</description></item><item><title>Test the Lambda@Edge function</title><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/develop/test-function/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/workshop/develop/test-function/readme/</guid><description>In this step, you will test the Lambda@Edge function created in the last step
Test Lambda@Edge function To test Lambda@Edge function:
Open AWS Lambda Console in https://console.aws.amazon.com/lambda/home?region=us-east-1#/functions
Choose the function you have created, it would be similar to the following
Choose Code tab of the page, as shown in the following image, you will see the code which has been deployed by AWS Serverless Application Model(SAM)</description></item><item><title>Trigger from CloudFront</title><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/develop/trigger-function/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/workshop/develop/trigger-function/readme/</guid><description>Add a CloudFront Trigger to Run the Function Now that you have tested the Lambda function, in this step, you will configure the CloudFront trigger to run your function to add the headers in any response that CloudFront receives from the origin for your distribution.
To configure the CloudFront trigger for your function
Choose Configuration tab and choose Triggers, you will see there is an API Gateway trigger which is deployed by hello world SAM template, delete it since you will not need it in this workshop</description></item><item><title>Web ACLs and Managed Rules</title><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/security-practice/rule-testing/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/workshop/security-practice/rule-testing/readme/</guid><description>In this step of the workshop, you will see how the AWS WAF protects against common attacks, such as SQL injection or Command Line attacks.
Introduction Web ACLs A web ACL (Web Access Control List) is the core resource in an AWS WAF deployment. It contains rules that are evaluated for each request that it receives. A web ACL is associated to your web application via either an Amazon CloudFront distribution, AWS API Gateway API or an AWS Application Load Balancer.</description></item><item><title>Prevent DDoS attacks</title><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/security-practice/flood-testing/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/workshop/security-practice/flood-testing/readme/</guid><description>In this step of the workshop, we will demonstrate the functionality provided by the WAF &amp;amp; Shield Automations Solution to detect this type of attack and block the responsible IP address in AWS WAF.
Introduction HTTP flood rule protects against attacks that consist of a large number of requests from a particular IP address, such as a web-layer DDoS attack or a brute-force login attempt. With this rule, you can set a threshold that defines the maximum number of incoming requests allowed from a single IP address within five minutes.</description></item><item><title>WAF &amp; Shield Automations</title><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/cleanup/waf/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/workshop/cleanup/waf/readme/</guid><description>To clean the WAF &amp;amp; Shield Automations
Go to the CloudFormation console Open AwsCloudfrontWafStack stack and in the &amp;lsquo;Outputs&amp;rsquo; tab page, find AwsCloudfrontWafStack and WAFWorkshopSampleWebApp outputs and save the values in a text editor. Delete &amp;lsquo;AwsCloudfrontWafStack&amp;rsquo; and &amp;lsquo;WAFWorkshopSampleWebApp&amp;rsquo; stacks as below Empty and delete the AWS WAF and AWS CloudFront log buckets in the AWS S3 console. AppAccessLogBucketName WafLogBucketName default name is aws-access-log-bucket-cloudfront prefix with awscloudfrontwafstack-waflogbucket</description></item><item><title/><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/lambdaedge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/workshop/lambdaedge/</guid><description>Lambda@Edge Collection Roadmap Description This solution is a collection of various Lambda@Edge extensions for using CloudFront. Users are able to find the Lambda application in SAR(Serverless Application Repository) and deploy it with one-click. The solution covers common use scenarios, for example, authentication with Amazon Cognito on a CloudFront distribution, access relative content according to the device type.
It is an open-source project in GitHub, anyone is welcomed to contribute new Lambda@Edge features.</description></item><item><title/><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/workshop/readme/</guid><description/></item></channel></rss>