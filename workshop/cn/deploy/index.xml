<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>部署CloudFront Extensions on CloudFront Extensions</title><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/cn/deploy/</link><description>Recent content in 部署CloudFront Extensions on CloudFront Extensions</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://awslabs.github.io/aws-cloudfront-extensions/workshop/cn/deploy/index.xml" rel="self" type="application/rss+xml"/><item><title>部署Lambda@Edge实现Cognito鉴权</title><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/cn/deploy/deploy-auth/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/workshop/cn/deploy/deploy-auth/readme/</guid><description>在本章中, 您将会在SAR（Serverless Application Repository）中查找并部署一个已发布的无服务器应用。此应用会在您的网站上实现Amazon Cognito鉴权功能。
如下是本实验的架构图
包含如下两个S3桶
私有S3桶: 包含私有内容，用户需要通过Amazon Cognito登录后才能访问此内容 公有S3桶: 包含本次实验的网站资源，用户无需登录即可通过CloudFront访问此资源 实现原理如下
用户访问Amazon Cognito UI页面进行登录 登录后，Cognito会生成一个JWT(Json Web Token)并返回一个包含JWT的跳转URL 用户的浏览器解析URL中的JWT，然后向S3桶中的私有内容发送请求，同时将JWT添加到鉴权header中 CloudFront将请求路由到最近的AWS边缘节点。在查看者请求（viewer request）阶段，CloudFront REC（区域边缘缓存）上会触发一个Lambda@Edge函数 此Lambda@Edge函数解析并校验JWT 如果Lambda@Edge函数的所有校验步骤都通过，Lambda@Edge删除鉴权header，并允许此请求继续向下分发到源站服务器（即私有S3桶） 私有S3桶中的私有内容将会返回给用户 在实验开始前，由于网页使用了jQuery，请确认此jQuery链接可以正常访问
通过CloudFormation部署网站 本步骤中，您将通过CloudFormation部署本实验的网站，包含一个私有S3桶、公有S3桶以及相应的前端资源
点击此链接启动CloudFormation堆栈 使用默认选项点击下一步，勾选全部我确认复选框后点击创建堆栈按钮. 等待部署完成 您可以在CloudFormation Console中查看部署进展。进入CloudFormation console并选择名字为auth-at-edge的堆栈 点击输出标签页，可以看到所有已创建的资源，找到CloudFrontDistribution、CognitoUserPoolId和DemoUrl，您将会在后续步骤中使用到它们 通过SAR部署鉴权校验应用 本步骤中，您将通过SAR(Serverless Application Repository)部署一个Lambda函数到您的账号
打开AWS SAR(Serverless Application Repository)页面 勾选搜索栏下方的Show apps that create custom IAM roles or resource policies复选框 在搜索栏中输入authentication-with-cognito并搜索，点击应用链接进入应用详情页面，点击Deploy按钮 您可通过搜索关键字aws-cloudfront-extensions找到所有CloudFront extensions
在应用详情页面中，粘贴上一步CloudFormation堆栈的Cognito User Pool Id，勾选I acknowledge that this app creates custom IAM roles 点击Deploy按钮。等待直到部署成功，部署完成后会自动跳转到无服务器应用页面 选择AuthenticationByCognito进入Lambda页面，下一步您将会配置此Lambda函数 配置CloudFront作为Lambda的触发器 本步骤中，您将为上一步部署完成的Lambda配置触发器</description></item><item><title>部署Lambda@Edge实现根据设备类型返回相应内容</title><link>https://awslabs.github.io/aws-cloudfront-extensions/workshop/cn/deploy/deploy-device/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/workshop/cn/deploy/deploy-device/readme/</guid><description>在本章中, 您将会在SAR（Serverless Application Repository）中查找并部署一个已发布的无服务器应用。此应用会根据设备类型返回相应内容，例如在手机上访问此网页，会返回手机端网页，在PC浏览器上访问同一网页，会返回桌面端网页
如下是本实验的架构图
S3桶包含一个实验网站的内容，桶中有如下4个文件夹：
desktop: 如果请求是来源于PC浏览器，此文件夹的资源将会返回 mobile: 如果请求是来源于手机，此文件夹的资源将会返回 smarttv: 如果请求是来源于智能电视，此文件夹的资源将会返回 tablet: 如果请求是来源于平板电脑，此文件夹的资源将会返回 实现原理如下
用户向CloudFront发送查看者请求 CloudFront将如下请求头转发到源站服务器，此请求头通过查看者请求中的User-Agent获得。 CloudFront会将如下请求头设置为true或者false，例如，如果请求是来源于手机，CloudFront会将CloudFront-Is-Mobile-Viewer设置为true并把其他三个请求头设置为false CloudFront-Is-Desktop-Viewer CloudFront-Is-Mobile-Viewer CloudFront-Is-SmartTV-Viewer CloudFront-Is-Tablet-Viewer CloudFront将请求路由到最近的AWS边缘节点。在源请求阶段，CloudFront REC（区域边缘缓存）上会触发一个Lambda@Edge函数 此Lambda@Edge函数根据请求头重写URI，例如，如果请求来源于手机，那么它将会请求mobile文件夹中的资源 S3桶的相应文件夹中的资源将会返回给用户 通过SAR部署应用 本步骤中，您将通过SAR(Serverless Application Repository)部署一个Lambda函数到您的账号
打开AWS SAR(Serverless Application Repository)页面 勾选搜索栏下方的Show apps that create custom IAM roles or resource policies复选框 在搜索栏中输入serving-based-on-device并搜索, 点击应用链接进入应用详情页面，点击Deploy按钮 您可通过搜索关键字aws-cloudfront-extensions找到所有CloudFront extensions
在应用详情页面中，勾选I acknowledge that this app creates custom IAM roles 点击Deploy按钮。等待直到部署成功，部署完成后会自动跳转到无服务器应用页面 接下来，您将开始部署网站，您可选择通过CDK或者CloudFormation部署网站</description></item></channel></rss>