name: "pull request merge/push check"

on:
  push:
    branches:
      - 'main'
permissions:
  contents: write
  id-token: write # required to use OIDC authentication

jobs:
  git-secrets:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Checkout awslabs/git-secrets
        uses: actions/checkout@v2
        with:
          repository: awslabs/git-secrets
          ref: master
          path: git-secrets
      - name: Install git-secrets
        run: cd git-secrets && sudo make install && cd ..
      - name: Run git-secrets
        run: |
          git-secrets --register-aws
          git-secrets --scan

  build:
    needs: git-secrets
    runs-on: ubuntu-latest
    env:
      CI: "false"
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Pre Build
        run: |
          npm install -g aws-cdk
          cdk --version
          BSS_IMAGE_ASSET_REPOSITORY_NAME=$(echo "${{ vars.SOLUTION_NAME }}" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
          echo "BSS_IMAGE_ASSET_REPOSITORY_NAME=${BSS_IMAGE_ASSET_REPOSITORY_NAME}" >> $GITHUB_ENV
          BUILD_VERSION=v2.0.0_${{ github.run_number }}
          echo "BUILD_VERSION=${BUILD_VERSION}" >> $GITHUB_ENV
          if [ $(git tag -l "$BUILD_VERSION") ]; then
            git tag -d ${BUILD_VERSION}
          fi
          echo "CN_ASSETS=cn/" >> $GITHUB_ENV
          echo "GLOBAL_ASSETS=custom-domain/" >> $GITHUB_ENV
      - name: build
        run: |
          chmod +x ./templates/console/deployment/build-s3-dist.sh
          ${{ github.workspace }}/templates/console/deployment/build-s3-dist.sh ${{ secrets.DIST_OUTPUT_BUCKET }} ${{ vars.SOLUTION_NAME }} $BUILD_VERSION ${{ secrets.ECR }} ${{ secrets.ECR_CN }} ${{ vars.AWS_ASSET_ACCOUNT_ID }} ${{ vars.REGIONS }} ${{ secrets.AWS_ASSET_PUBLISH_ROLE }}
          mkdir -p ${{ github.workspace }}/templates/console/deployment/open-source/ && touch ./templates/console/deployment/open-source/.empty
          # cd edges/cdk/deployment
          # ./build-s3-dist.sh ${{ secrets.DIST_OUTPUT_BUCKET }} ${{ vars.SOLUTION_NAME }} $BUILD_VERSION
          # cp -r ${{ github.workspace }}/edges/cdk/deployment/global-s3-assets/* $${{ github.workspace }}/templates/console/deployment/global-s3-assets/custom-domain/
          ls -LR ${{ github.workspace }}/templates/console/deployment/

      - name: post_build
        run: |
          # aws s3 cp s3://solutions-build-assets/changelog-spec.yml buildspec_2.yml || true
          set -euxo pipefail
          __dir="${{ github.workspace }}/templates/console/deployment"
          function join_by { local IFS="$1"; shift; echo "$*"; }
          export ECR_REPOS=$(join_by , `cat "${__dir}/ecr-repos"`)
          echo "ECR_REPOS=${ECR_REPOS}" >> $GITHUB_ENV
          export CN_ECR_REPOS=$(join_by , `cat "${__dir}/cn-ecr-repos"`)
          echo "CN_ECR_REPOS=${CN_ECR_REPOS}" >> $GITHUB_ENV
          git config --global user.email "cloudfront-extns-helper@example.com"
          git config --global user.name "cloudfront-extns-helper"
          git tag -a $BUILD_VERSION -m "${{ github.run_number }} ${{ github.job_workflow_sha }}"
      - name: archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
              .git/**/*
              deployment/**/*
              docs/**/*
              templates/console/deployment/**/*
              buildspec_2.yml
              deploy_vtag.yml
              CHANGELOG.md
              .cfnnagignore
              .cfnnag_global_suppress_list
              .cfnnag_*

  cfn-nag-scan:
    needs: build
    runs-on: ubuntu-latest
    env:
      CI: "false"
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
      - name: Setup Ruby 2.6
        uses: ruby/setup-ruby@477b21f02be01bcb8030d50f37cfec92bfa615b6
        with:
          ruby-version: 2.6
      - name: cfn_nag
        run: |
          # install Ruby
          # sudo apt-get install ruby-full
          # ls -R
          gem install cfn-nag
          cfn_nag -v
          echo "CloudFormation template scanning utility installation complete `date`"
          echo "Starting CloudFormation template scanning `date` in `pwd`"
          cd build-artifacts/
          export CFN_NAG_OPTS="--template-pattern ..*.template.json --print-suppression --fail-on-warnings"
          if [ -f ".cfnnag_global_suppress_list" ]; then export CFN_NAG_OPTS="$CFN_NAG_OPTS -b .cfnnag_global_suppress_list"; fi
          set -x; cfn_nag_scan $CFN_NAG_OPTS --input-path templates/console/deployment/global-s3-assets/
          # cfn_nag_scan --input-path .
          # echo "Completed CloudFormation template scanning `date`"

#  sematic_validate:
#    name: Validate PR title
#    runs-on: ubuntu-latest
#    needs: opensource-license-review
#    permissions:
#      pull-requests: write
#    steps:
#      - uses: amannn/action-semantic-pull-request@v5.0.2
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with :
#          types: |
#            feat
#            fix
#            docs
#            style
#            refactor
#            perf
#            test
#            build
#            ci
#            chore
#            revert

  semgrep-scan:
    needs: git-secrets
    runs-on: ubuntu-latest
    container:
      # A Docker image with Semgrep installed. Do not change this.
      image: returntocorp/semgrep
    # Skip any PR created by dependabot to avoid permission issues:
    if: (github.actor != 'dependabot[bot]')
    permissions:
      security-events: write
    steps:
      # Fetch project source with GitHub Actions Checkout.
      - uses: actions/checkout@v3
      # Run the "semgrep ci" command on the command line of the docker image.
      - run: semgrep ci --config auto --sarif --output=semgrep.sarif
      - name: Upload SARIF file for GitHub Advanced Security Dashboard
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: semgrep.sarif
        if: always()

  viperlight:
    runs-on: ubuntu-latest
    needs: git-secrets
    env:
      CI: "false"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Viperlight Scan
        run: |
          wget -q https://viperlight-scanner.s3.amazonaws.com/latest/.viperlightrc
          wget -q https://viperlight-scanner.s3.amazonaws.com/latest/viperlight.zip
          unzip -q viperlight.zip -d viperlight
          rm -r ./viperlight.zip
          cd viperlight  
          ./install.sh
          viperlight --version
          echo "Content scanning utility installation complete `date`"
          echo "Starting content scanning `date` in `pwd`"
          cd ${{ github.workspace }}/templates/console/source
          viperlight scan -m files-contents -m files-aws -m files-binary -m files-entropy -m files-secrets
          echo "Completed content scanning `date`"

  cdk-unit-test:
    runs-on: ubuntu-latest
    needs: git-secrets
    env:
      CI: "false"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Run Typescript Unit Test
        run: |
          cd ${{ github.workspace }}/templates/console/source
          npm install --legacy-peer-deps
          npm run test
      - name: Sed lcov report
        if: always()
        run: |
          cd ${{ github.workspace }}/templates/console/source/coverage
          sed -i 's/source\/lib\//\/github\/workspace\/templates\/console\/source\/lib\//g' lcov.info
          sed -i 's/source\/test\//\/github\/workspace\/templates\/console\/source\/test\//g' lcov.info
      - name: archive coverage report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cdk-coverage-report
          path: |
            templates/console/source/coverage/lcov.info

  ssl-lambda-unit-test:
    runs-on: ubuntu-latest
    needs: git-secrets
    env:
      CI: "false"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Run Saas Lambda Python Test
        env:
          AWS_DEFAULT_REGION: us-east-1
        run: |
          cd ${{ github.workspace }}/templates/console/source/lambda/ssl_for_saas/
          # pip install pytest
          pip install poetry          
          poetry install          
          export PYTHONPATH=../ssl_for_saas
          echo "PYTHONPATH=../ssl_for_saas" >> $GITHUB_ENV
          poetry run pytest --cov --cov-config=.coveragerc -cov-report=term-missing --cov-report="xml:./ssl-for-saas.coverage.xml" test
          sed -i 's/\/home\/runner\/work\/aws-cloudfront-extensions\/aws-cloudfront-extensions\//\/github\/workspace\//g' ssl-for-saas.coverage.xml
      - name: archive coverage report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: python-coverage-report
          path: |
            templates/console/source/lambda/ssl_for_saas/*.coverage.xml

  config-deployer-unit-test:
    runs-on: ubuntu-latest
    needs: git-secrets
    env:
      CI: "false"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Run Config and Deployer Lambda Python Test
        env:
          AWS_DEFAULT_REGION: us-east-1
        run: |
          cd ${{ github.workspace }}/templates/console/deployment
          ./run-lambda-ut.sh
      - name: Sed coverage report files
        if: always()
        run: |
          cd ${{ github.workspace }}/templates/console/source/all-coverages
          sed -i 's/\/home\/runner\/work\/aws-cloudfront-extensions\/aws-cloudfront-extensions\//\/github\/workspace\//g' *.coverage.xml
      - name: archive coverage report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: config-coverage-report
          path: |
            templates/console/source/all-coverages/*.coverage.xml

  monitoring-unit-test:
    runs-on: ubuntu-latest
    needs: git-secrets
    env:
      CI: "false"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Run Monitoring Lambda Python Test
        env:
          AWS_DEFAULT_REGION: us-east-1
        run: |
          cd ${{ github.workspace }}/templates/console/deployment
          ./run-unit-tests.sh
      - name: Sed coverage report files
        if: always()
        run: |
          cd ${{ github.workspace }}/templates/console/deployment/monitoring-coverages
          sed -i 's/\/home\/runner\/work\/aws-cloudfront-extensions\/aws-cloudfront-extensions\//\/github\/workspace\//g' *.coverage.xml
      - name: archive coverage report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: monitoring-coverage-report
          path: |
            templates/console/deployment/monitoring-coverages/*.coverage.xml

  sonarqube:
    needs: [ssl-lambda-unit-test, config-deployer-unit-test, monitoring-unit-test, cdk-unit-test]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v3
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
      - name: Download python coverage report
        uses: actions/download-artifact@v3
        with:
          name: python-coverage-report
          path: ${{ github.workspace }}/templates/console/source/lambda/ssl_for_saas/
      - name: Download cdk coverage report
        uses: actions/download-artifact@v3
        with:
          name: cdk-coverage-report
          path: ${{ github.workspace }}/templates/console/source/coverage
      - name: Download config and deployer coverage report
        uses: actions/download-artifact@v3
        with:
          name: config-coverage-report
          path: ${{ github.workspace }}/templates/console/source/all-coverages
      - name: Download monitoring coverage report
        uses: actions/download-artifact@v3
        with:
          name: monitoring-coverage-report
          path: ${{ github.workspace }}/templates/console/source/monitoring-coverages
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  codeguru:
    needs: git-secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0   # Required
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::261557372226:role/CodguruGithubRole
          role-duration-seconds: 900 # the ttl of the session, in seconds.
          aws-region: us-west-2
      - name: CodeGuru Reviewer
        uses: aws-actions/codeguru-reviewer@v1.1
        with:
  #        build_path: target # build artifact(s) directory
          s3_bucket: codeguru-reviewer-cloudfront-extn-bucket2
      - name: Upload review result
        if: ${{ github.event_name != 'push' }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: codeguru-results.sarif.json