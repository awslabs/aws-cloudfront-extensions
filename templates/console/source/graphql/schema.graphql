
schema {
	query: Query
	mutation: Mutation
}

enum ExtensionType {
    Lambda,
    LambdaEdge,
    CFF,
}

type Extension {
    name: String!
    templateUri: String!
    type: ExtensionType!
    desc: String!
    codeUri: String!
    stage: String
    updateDate: String!
    author: String
    status: String!
    tag: String
    cfnParameter: String
}

input ExtensionParameter {
    parameterKey: String
    parameterValue: String
}

type ConfigLink {
    config_link: String
}

type Version {
    distribution_id: String,
    versionId: String,
    config_link: String,
    dateTime: String
    note: String,
    s3_bucket: String,
    s3_key: String
}

type Cloudfront_info {
    id: String
    domainName: String
    status: String
    enabled: String
    versionCount: String
}

type cname {
    domainName: String!
    sanList: [String!]
    originsItemsDomainName: String!
}

type pem {
    CertPem: String!
    PrivateKeyPem: String!
    ChainPem: String!
    originsItemsDomainName: String!
}

type createOutput {
    statue: String!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
}

type importOutput {
    status: String!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
}

input cnameInput {
    domainName: String!
    sanList: [String!]
    originsItemsDomainName: String!
}

input pemInput {
    CertPem: String!
    PrivateKeyPem: String!
    ChainPem: String!
    originsItemsDomainName: String!
}

input certImportInput {
    acm_op: String!
    acm_domain: String!
    dist_aggregate: String!
    pem: [pemInput!]!
}

input certCreateInput {
    acm_op: String!
    acm_domain: String!
    dist_aggregate: String!
    cnameList: [cnameInput!]!
}

type Notification {
    id: ID
    date: AWSDate
    type: String
}

type Query {
    # List CloudFront extensions in extension repo
    listExtensions(page: Int, count: Int): String

    # Get the extension details
    queryByName(name: String!): Extension

    # query for config-version part
    apply_config(src_distribution_id: String, version: String, target_distribution_ids: [String]): String

    cf_list: [Cloudfront_info]

    config_tag_update(distribution_id: String, version: String, note: String): String

    diff(distribution_id: String, version1: String, version2: String): String

    versions(distribution_id: String): [Version]

    config_link(distribution_id: String, versionId: String): ConfigLink

    config_content(distribution_id: String, versionId: String): String

    # SSL for SAAS
    Notifications(limit: Int): [Notification]
}

type Mutation {
    # Deploy an extension
    deployExtension(name: String!, parameters: [ExtensionParameter]): String

    # Get the latest extensions
    syncExtensions: String

    # SSL for SAAS
    certCreate(input: certCreateInput): createOutput
    certImport(input: certImportInput!): importOutput
}

